## PATH

# Golang
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# Homebrew
if [ -d $HOME/.homebrew ]; then
  export HOMEBREW_PREFIX=$HOME/.homebrew
  export PATH=$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin:$PATH
  export PKG_CONFIG_PATH=$HOMEBREW_PREFIX/lib:$HOMEBREW_PREFIX/include
  export LD_LIBRARY_PATH=$HOMEBREW_PREFIX/lib
  HOMEBREW_NO_ANALYTICS=1
else
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
fi

export PATH=$HOME/.local/bin:$HOME/bin:$PATH

## Editor

if which nvim >/dev/null; then
  alias vim=nvim
fi

if which code >/dev/null; then
  export EDITOR=code
else
  export EDITOR=vim
fi

export VISUAL=$EDITOR
export CHEAT_EDITOR=$EDITOR

platform=`uname`


# Platform dependent ####################################################
if [[ "$platform" == "Darwin" ]]; then
    alias ls="ls -G"

    alias signalstrength="while true; /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep CtlRSSI | sed -e 's/^.*://g' | xargs -I SIGNAL printf \"\rRSSI dBm: SIGNAL\"; sleep 0.5; end"

    # Flush Directory Service cache
    alias flush="dscacheutil -flushcache"

    # Empty the Trash
    alias emptytrash="rm -rfv ~/.Trash"

    # Recursively delete `.DS_Store` files
    alias cleanup="find . -name '*.DS_Store' -type f -ls -delete"

    # Show/hide hidden files in Finder
    alias show="defaults write com.apple.Finder AppleShowAllFiles -bool true and killall Finder"
    alias hide="defaults write com.apple.Finder AppleShowAllFiles -bool false and killall Finder"

    # Hide/show all desktop icons (useful when presenting)
    alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false and killall Finder"
    alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true and killall Finder"

    # Disable Spotlight
    alias spotoff="sudo mdutil -a -i off"
    # Enable Spotlight
    alias spoton="sudo mdutil -a -i on"
else
    alias ls="ls --color=auto"
    alias pbcopy="xclip -selection clipboard"
    alias pbpaste="xclip -selection clipboard -o"
    # alias open="xdg-open" # open is native in fish
    alias trash="gvfs-trash"
fi

# Useful aliases ########################################################
alias s="git status"

alias noise="play -c 2 -n synth pinknoise band -n 2500 4000 reverb 20"
alias gamma="play -n synth sin 315 sin 365 remix 1 2"
alias beta="play -n synth sin 315 sin 340 remix 1 2"
alias alpha="play -n synth sin 315 sin 325 remix 1 2"
alias theta="play -n synth sin 315 sin 320 remix 1 2"
alias delta="play -n synth sin 315 sin 317 remix 1 2"
alias gammap="play -n synth sin 315 sin 365 pinknoise remix 1,3 2,3"
alias ocean="play -c 2 -r 41k -t sl - synth $len brownnoise tremolo .13 70 < /dev/zero"
alias brown="play -c 2 -n synth 60:00 brownnoise"

#################################
### Network Related
#################################

alias localip="ipconfig getifaddr en0"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ and print $1'"
alias whois="whois -h whois-servers.net"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en0' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en0 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

function server() {
  open http://localhost:8080/
  python -m SimpleHTTPServer 8080
}

function digga() {
  dig +nocmd $1 any +multiline +noall +answer
}

alias myip="curl https://api.ipify.org"

################################
###  Unix Related
################################
# File size
alias fs="stat -f \"%z bytes\""

function md() {
  mkdir -p "$1"
  cd "$1"
}

# Global find and replace with Ag
function agr() { 
  ag -0 -l $1 | xargs -0 sed -ri -e "s/$1/$2/g"; 
}

# Generate random password
function randpw() {
  dd if=/dev/urandom bs=1 count=16 2>/dev/null | base64 | rev | cut -b 2- | rev
}

# Git aliases
alias s="git status"

# Time and date
alias week="date +%Y-W%V-%u"

# Navigation
alias home="cd $HOME"

# Audio and video
if which avconv >/dev/null; then
  alias ffmpeg="avconv"
fi

function screenrecord {
  ffmpeg -f x11grab -s $(xwininfo | grep 'geometry' | awk '{split($2,a,"+"); split(a[1],b,"x"); print b[1]-b[1]%2 "x" b[2]-b[2]%2 " -i :0.0+" a[2]-a[2]%2 "," a[3]-a[3]%2;}') -r 25 -vcodec libx264 ~/output.mkv
}

alias encrypt="openssl aes-256-cbc"
alias decrypt="openssl aes-256-cbc -d"

# FZF

if which fzf >/dev/null; then

  # fkill - kill processes - list only the ones you can kill. Modified the earlier script.
  function fkill() {
      local pid
      if [ "$UID" != "0" ]; then
          pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
      else
          pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
      fi

      if [ "x$pid" != "x" ]
      then
          echo $pid | xargs kill -${1:-9}
      fi
  }

  function fcd() {
      if [[ "$#" != 0 ]]; then
          builtin cd "$@";
          return
      fi
      while true; do
          local lsd=$(echo ".." && ls -p | grep '/$' | sed 's;/$;;')
          local dir="$(printf '%s\n' "${lsd[@]}" |
              fzf --reverse --preview '
                  __cd_nxt="$(echo {})";
                  __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
                  echo $__cd_path;
                  echo;
                  ls -p "${__cd_path}";
          ')"
          [[ ${#dir} != 0 ]] || return 0
          builtin cd "$dir" &> /dev/null
      done
  }

  # Modified version where you can press
  #   - CTRL-O to open with `open` command,
  #   - CTRL-E or Enter key to open with the $EDITOR
  function fopen() {
    local out file key
    IFS=$'\n' out=($(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e))
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
      [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
    fi
  }

  if which ag >/dev/null; then
    function fcode() {
      local file
      file="$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1}')"
      if [[ -n $file ]]
      then
        $EDITOR $file
      fi
    }
  fi

  if which brew >/dev/null; then

    # Install (one or multiple) selected application(s)
    # using "brew search" as source input
    # mnemonic [B]rew [I]nstall [P]lugin
    function bip() {
      local inst=$(brew search | fzf -m)

      if [[ $inst ]]; then
        for prog in $(echo $inst); do
          brew install $prog
        done
      fi
    }
    # Update (one or multiple) selected application(s)
    # mnemonic [B]rew [U]pdate [P]lugin
    function bup() {
      local upd=$(brew leaves | fzf -m)

      if [[ $upd ]]; then
        for prog in $(echo $upd); do
          brew upgrade $prog
        done
      fi
    }
    # Delete (one or multiple) selected application(s)
    # mnemonic [B]rew [C]lean [P]lugin (e.g. uninstall)
    function bcp() {
      local uninst=$(brew leaves | fzf -m)

      if [[ $uninst ]]; then
        for prog in $(echo $uninst); do
          brew uninstall $prog
        done
      fi
    }

  fi

fi
